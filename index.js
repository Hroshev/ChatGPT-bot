const dontev = require('dotenv').config();
const { Telegraf } = require('telegraf');
const { Configuration, OpenAIApi } = require("openai");

function getOpenai(model, temperature, max_tokens, top_p, frequency_penalty, presence_penalty) {
    return (() => {
      bot.on('text', async (ctx) =>{
          await ctx.telegram.sendChatAction(ctx.chat.id, 'typing');
          try {
              const configuration = new Configuration({apiKey: process.env.API_KEY,});
              const openai = new OpenAIApi(configuration);
              const response = await openai.createCompletion({
                  model,
                  prompt: ctx.message.text,
                  temperature,
                  max_tokens,
                  top_p,
                  frequency_penalty,
                  presence_penalty,
              });
              await ctx.reply(response.data.choices[0].text);
          }catch (error) {
              return await ctx.reply(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üò±\n –ö–æ–¥ –æ—à–∏–±–∫–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${error.response.status}`)
          }
      });
    })();
  }
  
const bot = new Telegraf(process.env.BOOT_TOKEN);

//Set bot commands
bot.telegram.setMyCommands([
    {command: 'start', description:'–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ'},
    {command: 'classic', description:'–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–∏–π —Ä–µ–∂–∏–º'},
    {command: 'creative', description:'–¢–≤–æ—Ä—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º'},
    {command: 'code', description:'–ù–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞'},
]);

//Start command
bot.start(async (ctx) => {
    await ctx.reply('üëã');
    await ctx.reply('–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å OpenAI, –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é –º–æ–¥–µ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É.');
    await ctx.reply('‚ö†Ô∏è–í–Ω–∏–º–∞–Ω–∏–µ!');
    await ctx.reply('1.–î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ 2021 –≥–æ–¥—É, –ø–æ—ç—Ç–æ–º—É –ò–ò –º–æ–∂–µ—Ç –Ω–µ –∑–Ω–∞—Ç—å –æ —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö.\n\n 2.–ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø—Ä–æ—à–ª—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞. \n\n 3.–ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
});

//classic
bot.command('classic', async (ctx) => {
    await ctx.reply('–ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?', getOpenai("text-davinci-003", 0.0, 1000, 1.0, 0.0, 0.0));
})

//creative
bot.command('creative', async (ctx) => {
    await ctx.reply('–ß—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å?', getOpenai("text-davinci-003", 0.5, 1000, 1.0, 0.5, 0.0))
})

//code
bot.command('code', async (ctx) => {
    await ctx.reply('–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å?', getOpenai("text-davinci-002", 0.0, 1000, 1.0, 0.5, 0.0))
})

bot.launch()