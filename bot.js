const { Telegraf, Markup, Extra } = require('telegraf');
const axios = require('axios');
const { Configuration, OpenAIApi } = require("openai");

const API_KEY = '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';
const BOOT_TOKEN = '5840606992:AAFCszKDGIkbyI_FS7wNvhf7iCQV-mDz3p8';
const API_WETHER = 'a74f2027eda7c610d7e5483e3a31417d';



const bot = new Telegraf(BOOT_TOKEN);

//–ö–æ–º–∞–Ω–¥—ã
bot.telegram.setMyCommands([
    {command: 'start', description:'–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ'},
    {command: 'weather', description:'–£–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã'},
    {command: 'openai', description:'–ß–∞—Ç-–±–æ—Ç —Å –ò–ò'}
])

// Start
bot.start((ctx) => {
    ctx.replyWithSticker('https://tlgrm.eu/_/stickers/fdb/2c3/fdb2c3d5-ae19-3b60-8ffc-7b3b8099cfe5/192/31.webp');
    ctx.reply(`üëã \n–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}. \n–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –≤—ã–±–∏—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é üëÄ`,
    // Extra.markup(
    //     Markup.keyboard([
    //         ['/openai'],
    //         ['/weather'],
    //     ])
    //     .oneTime()
    //     .resize()
    // ).HTML()
    )
})

//–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã
bot.command('weather', async (ctx) => {
    await ctx.reply(`–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ‚õÖ`,
    bot.on('message', async (ctx)=>{
        if (ctx.message.location) {
            const openWeather = `https://api.openweathermap.org/data/2.5/weather?lat=${ctx.message.location.latitude}&lon=${ctx.message.location.longitude}&appid=${API_WETHER}&lang=ru&units=metric`;
            const response = await axios.get(openWeather);
            ctx.reply(
                `–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ ${response.data.name}‚òî 
                \n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${Math.round(response.data.main.temp)}¬∞
                \n–ó–∞ –æ–∫–Ω–æ–º:  ${response.data.weather[0].description}
                \n–í–µ—Ç–µ—Ä: ${response.data.wind.speed} –º/c, –°–í
                \n–í–ª–∞–∂–Ω–æ—Å—Ç—å: ${response.data.main.humidity}%
                `)
        } else {
            ctx.reply(`–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é, –ø–æ–≤–æ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞`)
        }
    })
    )
})

//OpenAI
bot.command('openai', async (ctx) => {
    await ctx.reply(`–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å OpenAI API –∏ –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ç–µ–º–∞–º. \n\n –í—ã–±–µ—Ä–µ—Ç–µ –º–æ–¥–µ–ª—å –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –º–µ–Ω—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞‚ú®  \n\n‚ö†Ô∏è<b>–î–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–µ—Ç—Å—è –≤ 2021 –≥–æ–¥—É, –ø–æ—ç—Ç–æ–º—É –æ–Ω–∞ –º–æ–∂–µ—Ç –Ω–µ –∑–Ω–∞—Ç—å –æ —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö.</b>‚ö†Ô∏è`,
    Extra.markup(
        Markup.inlineKeyboard([
            [Markup.callbackButton('Grammar English ', 'grammar')],
            [Markup.callbackButton('Writing code', 'code')],
        ])
    ).HTML()
    )
})

// –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ grammar
bot.action('grammar', (ctx) => {
    ctx.editMessageText('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—Å—Ç! \n‚ö†Ô∏èBot –ø–µ—Ä–µ–≤–µ–¥–µ—Ç –≤–µ—Å—å –≤–∞—à —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫‚ö†Ô∏è \n\n–ü—Ä–∏–º–µ—Ä: \n-Did you eat —á—Ç–æ-–Ω–∏–±—É–¥—å —Å–µ–≥–æ–¥–Ω—è? \n-Did you eat anything today?', 
    bot.on('message', async (ctx) =>{
        const question = ctx.message.text;
        try {
            const configuration = new Configuration({apiKey: API_KEY,});
            const openai = new OpenAIApi(configuration);          
            const response = await openai.createCompletion({
                model: "text-davinci-003",
                prompt: `Correct this to standard English: ${question}`,
                temperature: 0,
                max_tokens: 250,
                top_p: 1.0,
                frequency_penalty: 0.0,
                presence_penalty: 0.0,
            });
            console.log(response.data.choices);
            const answer = response.data.choices[0].text;
            ctx.reply(answer);

        }catch (error) {
            // console.error(error);
            ctx.reply(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üò±. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ. \n\n–ö–æ–¥ –æ—à–∏–±–∫–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${error.response.status}  \n\n–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞: ${error.response.data.error.code}`);
        }
    }))
})

// –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ code
bot.action('code', (ctx) => {
    ctx.editMessageText('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—Å—Ç! \n–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–µ —Å–æ–∑–¥–∞—Ç—å? –î–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç, –∫–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –∏–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.', 
    bot.on('message', async (ctx) =>{
        const question = ctx.message.text;
        try {
            const configuration = new Configuration({apiKey: API_KEY,});
            const openai = new OpenAIApi(configuration);          
            const response = await openai.createCompletion({
                model: "text-davinci-002",
                prompt: question,
                temperature: 0,
                max_tokens: 1000,
                top_p: 1.0,
                frequency_penalty: 0.5,
                presence_penalty: 0.0,
            });
            console.log(response.data.choices);
            const answer = response.data.choices[0].text;
            ctx.reply(answer);

        }catch (error) {
            // console.error(error);
            ctx.reply(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üò±. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ. \n\n–ö–æ–¥ –æ—à–∏–±–∫–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${error.response.status}  \n\n–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞: ${error.response.data.error.code}`);
        }
    }))
})

// Else –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª
bot.on('message', async (ctx) => {
    const text = ctx.message.text;
    const user = ctx.from.username;
    await ctx.reply(`–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —á—Ç–æ —Ç—ã –º–Ω–µ –Ω–∞–ø–∏—Å–∞–ª! \n@${user}:  ${text}`)
    await ctx.replyWithSticker('https://tlgrm.eu/_/stickers/fdb/2c3/fdb2c3d5-ae19-3b60-8ffc-7b3b8099cfe5/192/35.webp');
})

bot.launch().then(() => {
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
});