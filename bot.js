const { Telegraf, Markup, Extra } = require('telegraf');
const axios = require('axios');
const { Configuration, OpenAIApi } = require("openai");

const API_KEY = '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';
const BOOT_TOKEN = '5840606992:AAFCszKDGIkbyI_FS7wNvhf7iCQV-mDz3p8';

const bot = new Telegraf(BOOT_TOKEN);


// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
// bot.on('photo', async (ctx) =>{})


bot.start((ctx) => {
    ctx.reply(`üëã \n–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name} \n\n–í—ã–±–∏—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é ‚û§`,
    Extra.markup(
        Markup.keyboard([
            ['/openai'],
        ])
        .oneTime()
        .resize()
    ).HTML()
    )
})


bot.command('openai', async (ctx) => {
    await ctx.reply(`–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å OpenAI API –∏ –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ç–µ–º–∞–º. \n\n –í—ã–±–µ—Ä–µ—Ç–µ –º–æ–¥–µ–ª—å –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –º–µ–Ω—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞‚ú®  \n\n‚ö†Ô∏è<b>–î–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–µ—Ç—Å—è –≤ 2021 –≥–æ–¥—É, –ø–æ—ç—Ç–æ–º—É –æ–Ω–∞ –º–æ–∂–µ—Ç –Ω–µ –∑–Ω–∞—Ç—å –æ —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö.</b>‚ö†Ô∏è`,
    Extra.markup(
        Markup.inlineKeyboard([
            [Markup.callbackButton('Grammar English ', 'grammar')],
            [Markup.callbackButton('Writing code', 'code')],
        ])
    ).HTML()
    )
})

//–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ grammar
bot.action('grammar', (ctx) => {
    ctx.editMessageText('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—Å—Ç! \nBot –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ê–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.  \n\n–ü—Ä–∏–º–µ—Ä: \n-Did you eat —á—Ç–æ-–Ω–∏–±—É–¥—å —Å–µ–≥–æ–¥–Ω—è? \n-Did you eat anything today?', 
    bot.on('message', async (ctx) =>{
        const question = ctx.message.text;
        try {
            const configuration = new Configuration({apiKey: API_KEY,});
            const openai = new OpenAIApi(configuration);          
            const response = await openai.createCompletion({
                model: "text-davinci-003",
                prompt: `Correct this to standard English: ${question}`,
                temperature: 0,
                max_tokens: 250,
                top_p: 1.0,
                frequency_penalty: 0.0,
                presence_penalty: 0.0,
            });
            console.log(response.data.choices);
            const answer = response.data.choices[0].text;
            ctx.reply(answer);

        }catch (error) {
            // console.error(error);
            ctx.reply(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üò±. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ. \n\n–ö–æ–¥ –æ—à–∏–±–∫–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${error.response.status}  \n\n–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞: ${error.response.data.error.code}`);
        }
    }))
})

bot.launch().then(() => {
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
});