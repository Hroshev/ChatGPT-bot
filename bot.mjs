import TeleBot from "telebot"
import dotenv from 'dotenv'
import mongo from './db.mjs'
import { Configuration, OpenAIApi } from "openai"

const bot = new TeleBot(process.env.TELEGRAM_BOT_TOKEN)

//Command
bot.on(['/start', '/help'], (msg) => msg.reply.text('–ü—Ä–∏–≤–µ—Ç, üëã\n\n –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å OpenAI, –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é –º–æ–¥–µ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É.\n\n ‚ùó‚ùó‚ùó–í–Ω–∏–º–∞–Ω–∏–µ‚ùó‚ùó‚ùó\n\n ‚óæ –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ 2021 –≥–æ–¥—É, –ø–æ—ç—Ç–æ–º—É –ò–ò –º–æ–∂–µ—Ç –Ω–µ –∑–Ω–∞—Ç—å –æ —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö.\n\n ‚óæ –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø—Ä–æ—à–ª—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞. \n\n ‚óæ –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.'))
bot.on('/env', (msg) => msg.reply.text(process.env.VERCEL_ENV))
// bot.on('/user', async (msg) => msg.reply.text(JSON.stringify(await fetchUser(msg.chat))))

//Send sticker
bot.on('sticker', (msg) => msg.reply.text('üëçCool'))

bot.on('text', async (msg) => {
    if (msg.text.startsWith('/')) return;
    let user = await fetchUser(msg.chat)
    const data = {id:user.id, count: user.count ? ++user.count : 1}
    user = await fetchUser(data)
    return msg.reply.text(`–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —á—Ç–æ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª! \n@${msg.from.username}: ${msg.text} \n ${user.count}`)
})

export default bot

//MongoDB
const users = mongo.db('AI_bot').collection('Users')

async function fetchUser(data) {
    // console.debug(data)
    const filter = {id: data.id}
    await users.updateOne(filter, {$set: data}, {upsert: true})
    return await users.findOne(filter)
}

// async function updateUser({id} = {}, data) {

// }

//OpenAi
function getOpenai(model, temperature, max_tokens, top_p, frequency_penalty, presence_penalty) {
    return (() => {
      bot.on('text', async (msg) =>{
        //   await ctx.telegram.sendChatAction(ctx.chat.id, 'typing');
          try {
              const configuration = new Configuration({apiKey: process.env.API_KEY,});
              const openai = new OpenAIApi(configuration);
              const response = await openai.createCompletion({
                  model,
                  prompt: msg.text,
                  temperature,
                  max_tokens,
                  top_p,
                  frequency_penalty,
                  presence_penalty,
              });
              await msg.reply.text(response.data.choices[0].text);
          }catch (error) {
              return await msg.reply.text(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üò±\n –ö–æ–¥ –æ—à–∏–±–∫–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${error.response.status}`)
          }
      });
    })();
  }