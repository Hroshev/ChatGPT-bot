import TeleBot from "telebot";
import * as dotenv from 'dotenv';
import { Configuration, OpenAIApi } from "openai";
dotenv.config()

const bot = new TeleBot(process.env.TELEGRAM_BOT_TOKEN)

// bot.on('text', async (msg) => {
//     await msg.text.startsWith('/') ? null : await msg.reply.text(`–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —á—Ç–æ —Ç—ã –º–Ω–µ –Ω–∞–ø–∏—Å–∞–ª! \n@${msg.from.username}: ${msg.text}\n\n–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é`)
// });

//Start command
bot.on('/start', async (msg) => {
    await msg.reply.text('üëã')
    await msg.reply.text('–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å OpenAI, –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é –º–æ–¥–µ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É.')
    await msg.reply.text('‚ö†Ô∏è–í–Ω–∏–º–∞–Ω–∏–µ!')
    await msg.reply.text('1.–î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ 2021 –≥–æ–¥—É, –ø–æ—ç—Ç–æ–º—É –ò–ò –º–æ–∂–µ—Ç –Ω–µ –∑–Ω–∞—Ç—å –æ —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö.\n\n 2.–ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø—Ä–æ—à–ª—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞. \n\n 3.–ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è')
});

//Help command
bot.on('/help', async (msg) => await msg.reply.text('–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å OpenAI, –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é –º–æ–¥–µ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É.'));

//Vercel command
bot.on('/env', async (msg) => await msg.reply.text(process.env.VERCEL_ENV));

//Send sticker
bot.on('sticker', async (msg) => await msg.reply.text('üëç'));


function getOpenai(model, temperature, max_tokens, top_p, frequency_penalty, presence_penalty) {
    return (() => {
      bot.on('text', async (msg) =>{
        //   await ctx.telegram.sendChatAction(ctx.chat.id, 'typing');
          try {
              const configuration = new Configuration({apiKey: process.env.API_KEY,});
              const openai = new OpenAIApi(configuration);
              const response = await openai.createCompletion({
                  model,
                  prompt: msg.text,
                  temperature,
                  max_tokens,
                  top_p,
                  frequency_penalty,
                  presence_penalty,
              });
              await msg.reply.text(response.data.choices[0].text);
          }catch (error) {
              return await msg.reply.text(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üò±\n –ö–æ–¥ –æ—à–∏–±–∫–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${error.response.status}`)
          }
      });
    })();
  }

//classic
bot.on('/classic', async (msg) => {
    await msg.reply.text('–ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?')
    bot.on('text', async (msg) => {
        await msg.text.startsWith('/') ? null : await msg.reply.text(`–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —á—Ç–æ —Ç—ã –º–Ω–µ –Ω–∞–ø–∏—Å–∞–ª! \n@${msg.from.username}: ${msg.text}\n\n–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é`)
    });
})

export default bot