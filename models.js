
// English
bot.on('message', async (ctx) =>{
    const question = ctx.message.text;
    try {
        const configuration = new Configuration({
            apiKey: API_KEY,
          });
          const openai = new OpenAIApi(configuration);          
          const response = await openai.createCompletion({
            model: "text-davinci-003",
            prompt: `Correct this to standard English: ${question}`,
            temperature: 0,
            max_tokens: 250,
            top_p: 1.0,
            frequency_penalty: 0.0,
            presence_penalty: 0.0,
          });

          console.log(response.data.choices);
          const answer = response.data.choices[0].text;
          ctx.reply(answer);


    }catch (error) {
        // console.error(error);
        ctx.reply(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üò±. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ. \n\n–ö–æ–¥ –æ—à–∏–±–∫–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${error.response.status}  \n\n–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞: ${error.response.data.error.code}`);
    }
});


//–ù–∞–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ 
bot.on('message', async (ctx) =>{
    const question = ctx.message.text;
    try {
        const configuration = new Configuration({
            apiKey: API_KEY,
          });
          const openai = new OpenAIApi(configuration);          
          const response = await openai.createCompletion({
            model: "text-davinci-003",
            prompt: question,
            temperature: 0.4,
            max_tokens: 1000,
            top_p: 1.0,
            frequency_penalty: 0.0,
            presence_penalty: 0.0,
          });

          console.log(response.data);
          const answer = response.data.choices[0].text;
          ctx.reply(answer);


    }catch (error) {
        // console.error(error);
        ctx.reply(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üò±. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ. \n\n–ö–æ–¥ –æ—à–∏–±–∫–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${error.response.status}  \n\n–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞: ${error.response.data.error.code}`);
    }
});

//–ù–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞ –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏ 
bot.on('message', async (ctx) =>{
    const question = ctx.message.text;
    try {
        const configuration = new Configuration({
            apiKey: API_KEY,
          });
          const openai = new OpenAIApi(configuration);          
          const response = await openai.createCompletion({
            model: "text-davinci-002",
            prompt: question,
            temperature: 0,
            max_tokens: 1000,
            top_p: 1.0,
            frequency_penalty: 0.5,
            presence_penalty: 0.0,
          });

          console.log(response.data);
          const answer = response.data.choices[0].text;
          ctx.reply(answer);


    }catch (error) {
        // console.error(error);
        ctx.reply(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üò±. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ. \n\n–ö–æ–¥ –æ—à–∏–±–∫–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${error.response.status}  \n\n–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞: ${error.response.data.error.code}`);
    }
});
